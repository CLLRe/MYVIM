"=======================================
"	           _     _             
"	 _ __ ___ (_)___| |_ __ _  ___ 
"	| '_ ` _ \| / __| __/ _` |/ __|
"	| | | | | | \__ \ || (_| | (__ 
"	|_| |_| |_|_|___/\__\__, |\___|
"                    |___/      
"
"=======================================

" Colemak layout

let g:go_def_mode='gopls'
let g:go_info_mode='gopls'
"使golang中的func等高亮
"使golang中的func等高亮
let g:go_highlight_functions = 1
let g:go_highlight_methods = 1
let g:go_highlight_structs = 1
let g:go_highlight_operators = 1
let g:go_highlight_build_constraints = 1
"disable warning:"vim-go: initialized gopls""
let g:go_gopls_enabled = 0

"================================================================
" Auto add title of file.
"================================================================
" autocmd BufNewFile * exec ":call SetTitle()"
" autocmd BufWrite * exec ":call SetModifiedTime()"
func SetTitle()
	let type = expand("%:e")		"Get type of file.
	if type == 'cpp' || type == 'cc' || type == 'c' || type == 'sql' || type == 'h' || type == 'hpp'
		call setline(1, "/*============================")
		call append(line("."), "*	File Name: ".expand("%"))
		call append(line(".")+1, "*	Created Date: ".strftime("%c"))
		call append(line(".")+2, "*	Last Modified Date: ".strftime("%c"))
		call append(line(".")+3, "*	Author: mistgc")
		call append(line(".")+4, "*	Email: georgecai0908@outlook.com")
		call append(line(".")+5, "============================*/")
	endif
	if type == 'vim'
		call setline(1, "\"============================")
		call append(line("."), "\"*	File Name: ".expand("%"))
		call append(line(".")+1, "\"*	Created Date: ".strftime("%c"))
		call append(line(".")+2, "\"*	Last Modified Date: ".strftime("%c"))
		call append(line(".")+3, "\"*	Author: mistgc")
		call append(line(".")+4, "\"*	Email: georgecai0908@outlook.com")
		call append(line(".")+5, "\"============================*/")
	endif
endfunc
func SetModifiedTime()
	let type = expand("%:e")		"Get type of file.
	if type == 'cpp' || type == 'cc' || type == 'c'
		let modif_time = strftime("%c")
		let line = '*	Last Modified Date:'.modif_time
		call setline(4, line)
	endif
	if type == 'vim'
		let modif_time = strftime("%c")
		let line = '"*	Last Modified Date:'.modif_time
		call setline(4, line)
	endif
endfunc
"================================================================

function! s:Requirehello(host) abort
    " 'hello' is the binary created by compiling the program above.
    return jobstart(['hello'], {'rpc': v:true})
endfunction

call remote#host#Register('hello', 'x', function('s:Requirehello'))
" The following lines are generated by running the program
" command line flag --manifest hello
call remote#host#RegisterPlugin('hello', '0', [
    \ {'type': 'function', 'name': 'Hello', 'sync': 1, 'opts': {}},
    \ ])

" vim:ts=4:sw=4:et
"

"================================================================
" Base configuration
"================================================================
set nocompatible "不使用兼容模式
set nu "显示行号
syntax on "语法高亮
set ruler "显示标尺
set showcmd "出入的命令显示出来，看的清楚些
set scrolloff=3 "光标移动到buffer的顶部和底部时保持3行距离
set laststatus=2 "总是显示状态行
set noeb "去掉输入错误的提示声音
set autoindent "自动缩进
set relativenumber "相对行号
set noundofile
set nobackup
set noswapfile
" Important!!
if has('termguicolors')
  set termguicolors
endif
" Configuration of Scheme 'gruvbox'
"
"let g:gruvbox_contrast_dark = 'hard'
"autocmd vimenter * ++nested colorscheme gruvbox
"
" Configuration of Scheme 'edge'
let g:edge_style = 'aura'
let g:airline_theme = 'edge'
let g:lightline = {'colorscheme' : 'edge'}
set bg=dark
autocmd vimenter * ++nested colorscheme edge

"set foldmethod = manual
"set spell "拼写检查
"colorscheme molokai
syntax enable

"NERDTREE_CONFIG
"autocmd VimEnter * NERDTree | wincmd p
"autocmd BufWinEnter * silent NERDTreeMirror
"
"" Start NERDTree when Vim is started without file arguments.
"autocmd StdinReadPre * let s:std_in=1
"autocmd VimEnter * if argc() == 0 && !exists('s:std_in') | NERDTree | endif
""
"" Open the existing NERDTree on each new tab.
"autocmd BufWinEnter * if getcmdwintype() == '' | silent NERDTreeMirror | endif
"
"autocmd VimEnter * if argc() == 1 && isdirectory(argv()[0]) && !exists('s:std_in') |
"    \ execute 'NERDTree' argv()[0] | wincmd p | enew | execute 'cd '.argv()[0] | endif

"Exit Vim if NERDTree is the only window remaining in the only tab.
autocmd BufEnter * if tabpagenr('$') == 1 && winnr('$') == 1 && exists('b:NERDTree') && b:NERDTree.isTabTree() |
     \ quit | endif


"set t_Co=256
set expandtab "(是否在缩进和遇到 Tab 键时使用空格替代;使用 noexpandtab 取消设置)
set tabstop=4 "用多少个空格来显示一个制表符，只是用来显示。
set shiftwidth=4 "缩进长度
set softtabstop=4 "(软制表符宽度,设置为非零数值后使用 Tab 键和 Backspace 时光标移动的格数等于该数值,但实际插入的字符仍受 tabstop 和 expandtab 控制);
"一般不要使用该设置 或 使该值等于你想要的一个制表符的宽度
"set shiftwidth=4 "指用>>或<<进行缩进的空格数,例如set
"shiftwidth=20,再按>>就向左移动20个空格的距离.
""这20个空格的距离是用tabstop来转换的,例如tabstop=5,那按>>的结果就是用4个tab来填充.
set hls "高亮显示搜索结果 等同于 set hlsearch
set showmatch "高亮显示匹配的括号
set whichwrap+=<,>,h,l "允许backspace和光标键跨越行边界
set cursorline "在光标当先行底部显示一条线，以标识出当前光标所在行
set mouse=a "鼠标总是可用
set showcmd
set wildmenu
set hidden "允许没有进行修改退出buffer
set smartindent "暂时还不清楚做什么用的
"set encoding=utf-8
""这个目前还不确定需不需要配置，该怎么配置，这是VIM内部使用的编码方式
"set fileencoding=utf-8 "不需要配置
"Vim启动时会按照它所列出的字符编码方式逐一探测即将打开的文件的字符编码方式，并且将 fileencoding 设置为最终探测到的字符编码方式
set fileencodings=ucs-bom,utf-8,gbk "这里很重要，这一行表示vim编码格式依次选择
"解释:加入GBK,可支持GBK编码的
set ignorecase "搜索时忽略大小写
set cindent "使用C样式的缩进
autocmd FileType make set noexpandtab "当文件类型是make的时候，
set noexpandtab
" set statusline=%F%m%r%h%w\ [%{&ff}\|%Y]\ [%04l,%04v\|%p%%*%L] "vim状态栏的显示信息
set nocompatible " be iMproved, required
filetype off " required
"================================================================

"================================================================
" Configuration of Dashboard
"================================================================
" TODO
"================================================================

"================================================================
" 常用按键设置
"================================================================
noremap n j
noremap e k
noremap i l
noremap j e
noremap k n
noremap l i

noremap N 5j
noremap E 5k
noremap L I

noremap Q :q<CR>
noremap S :w<CR>

nmap ,, :vsp<CR>
nnoremap <backspace> :noh<CR>
nnoremap H <c-w>h
nnoremap I <c-w>l
nnoremap <leader>n :NERDTreeFocus<CR>
nnoremap <leader>fs :tabedit ~/.config/nvim/init.vim<CR>
"nnoremap <C-n> :NERDTree<CR>
nnoremap <C-t> :NERDTreeToggle<CR>
nnoremap <C-f> :NERDTreeFind<CR>
vnoremap Y "+y
nnoremap P "+p
"选择单词 (select word)
nnoremap <space> viw
nnoremap Q :q!<CR>
nnoremap W :w<CR>
nnoremap - @q
"================================================================
"
"================================================================
" Configuration of Markdown
"================================================================
" set to 1, nvim will open the preview window after entering the markdown buffer
" default: 0
let g:mkdp_auto_start = 0

" set to 1, the nvim will auto close current preview window when change
" from markdown buffer to another buffer
" default: 1
let g:mkdp_auto_close = 1

" set to 1, the vim will refresh markdown when save the buffer or
" leave from insert mode, default 0 is auto refresh markdown as you edit or
" move the cursor
" default: 0
let g:mkdp_refresh_slow = 0

" set to 1, the MarkdownPreview command can be use for all files,
" by default it can be use in markdown file
" default: 0
let g:mkdp_command_for_global = 0

" set to 1, preview server available to others in your network
" by default, the server listens on localhost (127.0.0.1)
" default: 0
let g:mkdp_open_to_the_world = 0

" use custom IP to open preview page
" useful when you work in remote vim and preview on local browser
" more detail see: https://github.com/iamcco/markdown-preview.nvim/pull/9
" default empty
let g:mkdp_open_ip = ''

" specify browser to open preview page
" default: ''
let g:mkdp_browser = ''

" set to 1, echo preview page url in command line when open preview page
" default is 0
let g:mkdp_echo_preview_url = 0

" a custom vim function name to open preview page
" this function will receive url as param
" default is empty
let g:mkdp_browserfunc = ''

" options for markdown render
" mkit: markdown-it options for render
" katex: katex options for math
" uml: markdown-it-plantuml options
" maid: mermaid options
" disable_sync_scroll: if disable sync scroll, default 0
" sync_scroll_type: 'middle', 'top' or 'relative', default value is 'middle'
"   middle: mean the cursor position alway show at the middle of the preview page
"   top: mean the vim top viewport alway show at the top of the preview page
"   relative: mean the cursor position alway show at the relative positon of the preview page
" hide_yaml_meta: if hide yaml metadata, default is 1
" sequence_diagrams: js-sequence-diagrams options
" content_editable: if enable content editable for preview page, default: v:false
" disable_filename: if disable filename header for preview page, default: 0
let g:mkdp_preview_options = {
    \ 'mkit': {},
    \ 'katex': {},
    \ 'uml': {},
    \ 'maid': {},
    \ 'disable_sync_scroll': 0,
    \ 'sync_scroll_type': 'middle',
    \ 'hide_yaml_meta': 1,
    \ 'sequence_diagrams': {},
    \ 'flowchart_diagrams': {},
    \ 'content_editable': v:false,
    \ 'disable_filename': 0
    \ }

" use a custom markdown style must be absolute path
" like '/Users/username/markdown.css' or expand('~/markdown.css')
let g:mkdp_markdown_css = ''

" use a custom highlight style must absolute path
" like '/Users/username/highlight.css' or expand('~/highlight.css')
let g:mkdp_highlight_css = ''

" use a custom port to start server or random for empty
let g:mkdp_port = ''

" preview page title
" ${name} will be replace with the file name
let g:mkdp_page_title = '${name}'

" recognized filetypes
" these filetypes will have MarkdownPreview... commands
let g:mkdp_filetypes = ['markdown']
"================================================================

"================================================================
" OmniSharp
"================================================================
let g:OmniSharp_server_use_mono = 1
let g:OmniSharp_server_stdio = 1
let g:OmniSharp_highlight_type = 2
let g:OmniSharp_selector_ui = 'ctrlp'
"================================================================

"================================================================
" Configuration of FZF
"================================================================
" This is the default extra key bindings
nnoremap <leader>rn :FZF<CR>
let g:fzf_action = {
  \ 'ctrl-t': 'tab split',
  \ 'ctrl-x': 'split',
  \ 'ctrl-v': 'vsplit' }

" An action can be a reference to a function that processes selected lines
function! s:build_quickfix_list(lines)
  call setqflist(map(copy(a:lines), '{ "filename": v:val }'))
  copen
  cc
endfunction

let g:fzf_action = {
  \ 'ctrl-q': function('s:build_quickfix_list'),
  \ 'ctrl-t': 'tab split',
  \ 'ctrl-x': 'split',
  \ 'ctrl-v': 'vsplit' }

" Default fzf layout
" - Popup window (center of the screen)
let g:fzf_layout = { 'window': { 'width': 0.9, 'height': 0.6 } }

" - Popup window (center of the current window)
let g:fzf_layout = { 'window': { 'width': 0.9, 'height': 0.6, 'relative': v:true } }

" - Popup window (anchored to the bottom of the current window)
let g:fzf_layout = { 'window': { 'width': 0.9, 'height': 0.6, 'relative': v:true, 'yoffset': 1.0 } }

" - down / up / left / right
let g:fzf_layout = { 'down': '50%' }

" - Window using a Vim command
let g:fzf_layout = { 'window': 'enew' }
let g:fzf_layout = { 'window': '-tabnew' }
let g:fzf_layout = { 'window': '10new' }

" Customize fzf colors to match your color scheme
" - fzf#wrap translates this to a set of `--color` options
let g:fzf_colors =
\ { 'fg':      ['fg', 'Normal'],
  \ 'bg':      ['bg', 'Normal'],
  \ 'hl':      ['fg', 'Comment'],
  \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
  \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
  \ 'hl+':     ['fg', 'Statement'],
  \ 'info':    ['fg', 'PreProc'],
  \ 'border':  ['fg', 'Ignore'],
  \ 'prompt':  ['fg', 'Conditional'],
  \ 'pointer': ['fg', 'Exception'],
  \ 'marker':  ['fg', 'Keyword'],
  \ 'spinner': ['fg', 'Label'],
  \ 'header':  ['fg', 'Comment'] }
"================================================================

"================================================================
" Plugin
"================================================================
call plug#begin()
"Plug 'fatih/vim-go',{'for': 'go'}
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'ryanoasis/vim-devicons'
Plug 'glepnir/dashboard-nvim'
Plug 'sainnhe/edge'
Plug 'preservim/nerdtree',{'on': 'NERDTreeToggle'}
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'itchyny/lightline.vim'
Plug 'chemzqm/wxapp.vim'
" Plug 'morhetz/gruvbox'
Plug 'kyazdani42/nvim-web-devicons' " Recommended (for coloured icons)
Plug 'akinsho/bufferline.nvim'
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
" [Markdown]
" markdown-preview.vim 需要 mathjax-support-for-mkdp 插件
" Plug 'iamcco/mathjax-support-for-mkdp' 
" Plug 'https://gitee.com/yaozhijin/markdown-preview.nvim.git', { 'do': { -> mkdp#util#install() }, 'for': ['markdown', 'vim-plug']}
Plug 'godlygeek/tabular'
Plug 'iamcco/markdown-preview.nvim', { 'do': { -> mkdp#util#install() }, 'for': ['markdown', 'vim-plug']}
Plug 'plasticboy/vim-markdown'
Plug 'OmniSharp/omnisharp-vim'
Plug 'ctrlpvim/ctrlp.vim'
"Plug 'vim-syntastic/syntastic'

"Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate'}  " We recommend updating the parsers on update
call plug#end()
"================================================================

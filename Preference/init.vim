"My Vim/Neovim Preferance
let g:go_def_mode='gopls'
let g:go_info_mode='gopls'
"使golang中的func等高亮
let g:go_highlight_functions = 1
let g:go_highlight_methods = 1
let g:go_highlight_structs = 1
let g:go_highlight_operators = 1
let g:go_highlight_build_constraints = 1
"disable warning:"vim-go: initialized gopls""
let g:go_gopls_enabled = 0

"Nvim-go
if exists('g:loaded_hello')
    finish
endif
let g:loaded_hello = 1

function! s:Requirehello(host) abort
    " 'hello' is the binary created by compiling the program above.
    return jobstart(['hello'], {'rpc': v:true})
endfunction

call remote#host#Register('hello', 'x', function('s:Requirehello'))
" The following lines are generated by running the program
" command line flag --manifest hello
call remote#host#RegisterPlugin('hello', '0', [
    \ {'type': 'function', 'name': 'Hello', 'sync': 1, 'opts': {}},
    \ ])

" vim:ts=4:sw=4:et
"

set nocompatible "不使用兼容模式
set nu "显示行号
syntax on "语法高亮
set ruler "显示标尺
set showcmd "出入的命令显示出来，看的清楚些
set scrolloff=3 "光标移动到buffer的顶部和底部时保持3行距离
set laststatus=2 "总是显示状态行
set noeb "去掉输入错误的提示声音
set autoindent "自动缩进
set relativenumber "相对行号
set noundofile
set nobackup
set noswapfile
" Important!!
if has('termguicolors')
  set termguicolors
endif

" The configuration options should be placed before `colorscheme edge`.
let g:edge_style = 'aura'
let g:edge_enable_italic = 1
let g:edge_disable_italic_comment = 1
let g:airline_theme = 'edge'
let g:lightline = {'colorscheme' : 'edge'}
let g:edge_style = 'aura'
colorscheme edge

"set foldmethod = manual
"set spell "拼写检查
"colorscheme molokai
syntax enable

"NERDTREE_CONFIG
"autocmd VimEnter * NERDTree | wincmd p
"autocmd BufWinEnter * silent NERDTreeMirror
" Exit Vim if NERDTree is the only window left.
"autocmd BufEnter * if tabpagenr('$') == 1 && winnr('$') == 1 && exists('b:NERDTree') && b:NERDTree.isTabTree() |
"     \ quit | endif
"autocmd StdinReadPre * let s:std_in=1
"autocmd VimEnter * if argc() == 0 && !exists('s:std_in') | NERDTree | endif
"autocmd VimEnter * if argc() == 1 && isdirectory(argv()[0]) && !exists('s:std_in') |
"    \ execute 'NERDTree' argv()[0] | wincmd p | enew | execute 'cd '.argv()[0] | endif

"set t_Co=256
set expandtab "(是否在缩进和遇到 Tab 键时使用空格替代;使用 noexpandtab 取消设置)
set tabstop=4 "用多少个空格来显示一个制表符，只是用来显示。
set shiftwidth=4 "缩进长度
set softtabstop=4 "(软制表符宽度,设置为非零数值后使用 Tab 键和 Backspace 时光标移动的格数等于该数值,但实际插入的字符仍受 tabstop 和 expandtab 控制);
"一般不要使用该设置 或 使该值等于你想要的一个制表符的宽度
"set shiftwidth=4 "指用>>或<<进行缩进的空格数,例如set
"shiftwidth=20,再按>>就向左移动20个空格的距离.
""这20个空格的距离是用tabstop来转换的,例如tabstop=5,那按>>的结果就是用4个tab来填充.
set hls "高亮显示搜索结果 等同于 set hlsearch
set showmatch "高亮显示匹配的括号
set whichwrap+=<,>,h,l "允许backspace和光标键跨越行边界
set cursorline "在光标当先行底部显示一条线，以标识出当前光标所在行
set mouse=a "鼠标总是可用
set showcmd
set wildmenu
set hidden "允许没有进行修改退出buffer
set smartindent "暂时还不清楚做什么用的
"set encoding=utf-8
""这个目前还不确定需不需要配置，该怎么配置，这是VIM内部使用的编码方式
"set fileencoding=utf-8 "不需要配置
"Vim启动时会按照它所列出的字符编码方式逐一探测即将打开的文件的字符编码方式，并且将 fileencoding 设置为最终探测到的字符编码方式
set fileencodings=ucs-bom,utf-8,gbk "这里很重要，这一行表示vim编码格式依次选择
"解释:加入GBK,可支持GBK编码的
set ignorecase "搜索时忽略大小写
set cindent "使用C样式的缩进
autocmd FileType make set noexpandtab "当文件类型是make的时候，
set noexpandtab
"常用按键设置
nmap ,, :tabedit<CR>
map <backspace> :noh<CR>
nnoremap <C-l> gt
nnoremap <C-h> gT
nnoremap <leader>n :NERDTreeFocus<CR>
nnoremap <C-n> :NERDTree<CR>
nnoremap <C-t> :NERDTreeToggle<CR>
nnoremap <C-f> :NERDTreeFind<CR>
nnoremap <leader>fs :tabedit ~/AppData/Local/nvim/init.vim<CR>
"选择单词 (select word)
nnoremap <space> viw
set statusline=%F%m%r%h%w\ [%{&ff}\|%Y]\ [%04l,%04v\|%p%%*%L] "vim状态栏的显示信息
set nocompatible " be iMproved, required
filetype off " required
call plug#begin()
Plug 'fatih/vim-go'
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'ryanoasis/vim-devicons'
Plug 'glepnir/dashboard-nvim'
"Plug 'scrooloose/nerdtree'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'itchyny/lightline.vim'
Plug 'chemzqm/wxapp.vim'
Plug 'sainnhe/edge'
Plug 'kyazdani42/nvim-web-devicons' " Recommended (for coloured icons)
Plug 'akinsho/bufferline.nvim'
"Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
"Plug 'junegunn/fzf.vim'
"Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate'}  " We recommend updating the parsers on update
call plug#end()
